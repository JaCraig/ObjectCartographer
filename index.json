{
  "api/ObjectCartographer.DataMapper.html": {
    "href": "api/ObjectCartographer.DataMapper.html",
    "title": "Class DataMapper | ObjectCartographer API Reference",
    "summary": "Class DataMapper Namespace ObjectCartographer Assembly ObjectCartographer.dll Data mapper public class DataMapper Inheritance object DataMapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Constructors DataMapper() Initializes a new instance of the DataMapper class. public DataMapper() DataMapper(ExpressionBuilderManager, ILogger<DataMapper>?) Initializes a new instance of the DataMapper class. public DataMapper(ExpressionBuilderManager expressionBuilder, ILogger<DataMapper>? logger = null) Parameters expressionBuilder ExpressionBuilderManager The expression builder. logger ILogger<DataMapper> The logger. Methods AutoMap(Type, Type) Automatically maps the two types. public DataMapper AutoMap(Type first, Type second) Parameters first Type The first. second Type The second. Returns DataMapper This. AutoMap<TFirst, TSecond>() Automatically maps the two types. public DataMapper AutoMap<TFirst, TSecond>() Returns DataMapper This. Type Parameters TFirst The type of the first. TSecond The type of the second. Copy(object?, object?, Type?) Copies the specified source to the destination public object? Copy(object? source, object? destination, Type? destinationType = null) Parameters source object The source. destination object The destination. destinationType Type Type of the destination (if null, system uses the type of the destination object). Returns object The resulting object. Copy<TDestination>(object?, TDestination) Copies the specified source to the destination object (or a new TDestination object if one is not passed in). public TDestination Copy<TDestination>(object? source, TDestination destination = default) Parameters source object The source. destination TDestination The destination. Returns TDestination The resulting object Type Parameters TDestination The type of the destination. Copy<TSource, TDestination>(TSource, TDestination) Copies the specified source to the destination object (or a new TDestination object if one is not passed in). public TDestination Copy<TSource, TDestination>(TSource source, TDestination destination = default) Parameters source TSource The source. destination TDestination The destination. Returns TDestination The resulting object Type Parameters TSource The type of the source. TDestination The type of the destination. Map(Type, Type) Maps the specified source to the destination. public ITypeMapping? Map(Type source, Type destination) Parameters source Type The source. destination Type The destination. Returns ITypeMapping The type mapping. Map<TSource, TDestination>() Maps the source type to the destination type public TypeMapping<TSource, TDestination>? Map<TSource, TDestination>() Returns TypeMapping<TSource, TDestination> The type mapping. Type Parameters TSource The type of the source. TDestination The type of the destination."
  },
  "api/ObjectCartographer.ExpressionBuilder.BaseClasses.ConverterBaseClass.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.BaseClasses.ConverterBaseClass.html",
    "title": "Class ConverterBaseClass | ObjectCartographer API Reference",
    "summary": "Class ConverterBaseClass Namespace ObjectCartographer.ExpressionBuilder.BaseClasses Assembly ObjectCartographer.dll Converter base class public abstract class ConverterBaseClass : IConverter Inheritance object ConverterBaseClass Implements IConverter Derived ClassToClassConverter FromDictionaryConverter FromJsonElementDictionaryConverter ICollectionConverter ToDictionaryConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Constructors ConverterBaseClass() Initializes a new instance of the ConverterBaseClass class. protected ConverterBaseClass() Properties Order Gets the order. public abstract int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public abstract bool CanHandle(Type source, Type destination) Parameters source Type The source. destination Type The destination. Returns bool true if this instance can handle the specified types; otherwise, false. CopyObject(Expression, Expression, Type, Type, IExpressionMapping, ExpressionBuilderManager, List<Expression>) Copies the object after object is created. protected abstract Expression CopyObject(Expression source, Expression destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager, List<Expression> expressions) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. expressions List<Expression> The expressions. Returns Expression The resulting expression. CreateObject(Expression, Expression, PropertyInfo[], ConstructorInfo[], IExpressionMapping, ExpressionBuilderManager) Creates the object. protected Expression CreateObject(Expression destinationVariable, Expression sourceVariable, PropertyInfo[] sourceProperties, ConstructorInfo[] destinationConstructors, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters destinationVariable Expression The destination variable. sourceVariable Expression The source variable. sourceProperties PropertyInfo[] The source properties. destinationConstructors ConstructorInfo[] The destination constructors. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. Returns Expression ForEach(Expression, ParameterExpression, Expression) Foreach loop helper method. protected Expression ForEach(Expression collection, ParameterExpression loopVar, Expression loopContent) Parameters collection Expression The collection. loopVar ParameterExpression The loop variable. loopContent Expression Content of the loop. Returns Expression The resulting expression GetCopyConstructor(Type, Type) Gets the constructor. protected ConstructorInfo? GetCopyConstructor(Type source, Type destination) Parameters source Type The source. destination Type The destination. Returns ConstructorInfo Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Maps the specified source to the destination. public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. Returns Expression The resulting expression. See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.BaseClasses.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.BaseClasses.html",
    "title": "Namespace ObjectCartographer.ExpressionBuilder.BaseClasses | ObjectCartographer API Reference",
    "summary": "Namespace ObjectCartographer.ExpressionBuilder.BaseClasses Classes ConverterBaseClass Converter base class"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.ArrayIEnumerableConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.ArrayIEnumerableConverter.html",
    "title": "Class ArrayIEnumerableConverter | ObjectCartographer API Reference",
    "summary": "Class ArrayIEnumerableConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll IEnumerable to array converter public class ArrayIEnumerableConverter : IConverter Inheritance object ArrayIEnumerableConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public bool CanHandle(Type sourceType, Type destinationType) Parameters sourceType Type Type of the source. destinationType Type Type of the destination. Returns bool true if this instance can handle the specified types; otherwise, false. Conversion<TSource, TDestination>(IEnumerable<TSource>, TDestination[]) Conversions the specified source. public TDestination[] Conversion<TSource, TDestination>(IEnumerable<TSource> source, TDestination[] destination) Parameters source IEnumerable<TSource> The source. destination TDestination[] The destination. Returns TDestination[] Type Parameters TSource The type of the source. TDestination The type of the destination. Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. Returns Expression The resulting expression. See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.AssignableFromConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.AssignableFromConverter.html",
    "title": "Class AssignableFromConverter | ObjectCartographer API Reference",
    "summary": "Class AssignableFromConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll Assignable from converter public class AssignableFromConverter : IConverter Inheritance object AssignableFromConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public bool CanHandle(Type sourceType, Type destinationType) Parameters sourceType Type Type of the source. destinationType Type Type of the destination. Returns bool true if this instance can handle the specified types; otherwise, false. Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Maps the specified source to the destination. public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. Returns Expression The resulting expression. See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.ClassToClassConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.ClassToClassConverter.html",
    "title": "Class ClassToClassConverter | ObjectCartographer API Reference",
    "summary": "Class ClassToClassConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll Class to class converter public class ClassToClassConverter : ConverterBaseClass, IConverter Inheritance object ConverterBaseClass ClassToClassConverter Implements IConverter Inherited Members ConverterBaseClass.Map(Expression, Expression, Type, Type, IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.CreateObject(Expression, Expression, PropertyInfo[], ConstructorInfo[], IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.ForEach(Expression, ParameterExpression, Expression) ConverterBaseClass.GetCopyConstructor(Type, Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public override int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public override bool CanHandle(Type sourceType, Type destinationType) Parameters sourceType Type Type of the source. destinationType Type Type of the destination. Returns bool true if this instance can handle the specified types; otherwise, false. CopyObject(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager, List<Expression>) Copies the properties. protected override Expression CopyObject(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager, List<Expression> expressions) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. expressions List<Expression> The expressions. Returns Expression See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.DefaultConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.DefaultConverter.html",
    "title": "Class DefaultConverter | ObjectCartographer API Reference",
    "summary": "Class DefaultConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll Default converters public class DefaultConverter : IConverter Inheritance object DefaultConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public bool CanHandle(Type sourceType, Type destinationType) Parameters sourceType Type Type of the source. destinationType Type Type of the destination. Returns bool true if this instance can handle the specified types; otherwise, false. ConvertTo(object?, object?, Type) Converts to. public object? ConvertTo(object? item, object? destination, Type destinationType) Parameters item object The item. destination object The destination. destinationType Type Type of the destination. Returns object Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. Returns Expression The resulting expression. See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.EnumConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.EnumConverter.html",
    "title": "Class EnumConverter | ObjectCartographer API Reference",
    "summary": "Class EnumConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll Enum converter public class EnumConverter : IConverter Inheritance object EnumConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public bool CanHandle(Type sourceType, Type destinationType) Parameters sourceType Type Type of the source. destinationType Type Type of the destination. Returns bool true if this instance can handle the specified types; otherwise, false. Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. Returns Expression The resulting expression. See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.FromDictionaryConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.FromDictionaryConverter.html",
    "title": "Class FromDictionaryConverter | ObjectCartographer API Reference",
    "summary": "Class FromDictionaryConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll From dictionary converter public class FromDictionaryConverter : ConverterBaseClass, IConverter Inheritance object ConverterBaseClass FromDictionaryConverter Implements IConverter Inherited Members ConverterBaseClass.Map(Expression, Expression, Type, Type, IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.CreateObject(Expression, Expression, PropertyInfo[], ConstructorInfo[], IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.ForEach(Expression, ParameterExpression, Expression) ConverterBaseClass.GetCopyConstructor(Type, Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public override int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public override bool CanHandle(Type source, Type destination) Parameters source Type The source. destination Type The destination. Returns bool true if this instance can handle the specified types; otherwise, false. CopyObject(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager, List<Expression>) Copies to dictionary. protected override Expression CopyObject(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager, List<Expression> expressions) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. expressions List<Expression> The expressions. Returns Expression The resulting expression. TryGetValue(IDictionary<string, object>, string, out object?) Tries the get value. public bool TryGetValue(IDictionary<string, object> dictionary, string key, out object? value) Parameters dictionary IDictionary<string, object> The dictionary. key string The key. value object The value. Returns bool See Also ConverterBaseClass"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.FromEnumConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.FromEnumConverter.html",
    "title": "Class FromEnumConverter | ObjectCartographer API Reference",
    "summary": "Class FromEnumConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll From enum converter public class FromEnumConverter : IConverter Inheritance object FromEnumConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public bool CanHandle(Type sourceType, Type destinationType) Parameters sourceType Type Type of the source. destinationType Type Type of the destination. Returns bool true if this instance can handle the specified types; otherwise, false. Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. Returns Expression The resulting expression. See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.FromJsonElementDictionaryConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.FromJsonElementDictionaryConverter.html",
    "title": "Class FromJsonElementDictionaryConverter | ObjectCartographer API Reference",
    "summary": "Class FromJsonElementDictionaryConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll Json element dictionary converter public class FromJsonElementDictionaryConverter : ConverterBaseClass, IConverter Inheritance object ConverterBaseClass FromJsonElementDictionaryConverter Implements IConverter Inherited Members ConverterBaseClass.Map(Expression, Expression, Type, Type, IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.CreateObject(Expression, Expression, PropertyInfo[], ConstructorInfo[], IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.ForEach(Expression, ParameterExpression, Expression) ConverterBaseClass.GetCopyConstructor(Type, Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public override int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public override bool CanHandle(Type source, Type destination) Parameters source Type The source. destination Type The destination. Returns bool true if this instance can handle the specified types; otherwise, false. CopyObject(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager, List<Expression>) Copies to dictionary. protected override Expression CopyObject(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager, List<Expression> expressions) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. expressions List<Expression> The expressions. Returns Expression The resulting expression. TryGetValue(IDictionary<string, JsonElement>, string, out JsonElement?) Tries the get value. public bool TryGetValue(IDictionary<string, JsonElement> dictionary, string key, out JsonElement? value) Parameters dictionary IDictionary<string, JsonElement> The dictionary. key string The key. value JsonElement? The value. Returns bool See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.ICollectionConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.ICollectionConverter.html",
    "title": "Class ICollectionConverter | ObjectCartographer API Reference",
    "summary": "Class ICollectionConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll Collection converter public class ICollectionConverter : ConverterBaseClass, IConverter Inheritance object ConverterBaseClass ICollectionConverter Implements IConverter Inherited Members ConverterBaseClass.Map(Expression, Expression, Type, Type, IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.CreateObject(Expression, Expression, PropertyInfo[], ConstructorInfo[], IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.ForEach(Expression, ParameterExpression, Expression) ConverterBaseClass.GetCopyConstructor(Type, Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public override int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public override bool CanHandle(Type sourceType, Type destinationType) Parameters sourceType Type Type of the source. destinationType Type Type of the destination. Returns bool true if this instance can handle the specified types; otherwise, false. CopyObject(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager, List<Expression>) Copies to collection. protected override Expression CopyObject(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager, List<Expression> expressions) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. expressions List<Expression> The expressions. Returns Expression See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.JsonDocumentConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.JsonDocumentConverter.html",
    "title": "Class JsonDocumentConverter | ObjectCartographer API Reference",
    "summary": "Class JsonDocumentConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll From JsonDocument converter public class JsonDocumentConverter : IConverter Inheritance object JsonDocumentConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public bool CanHandle(Type source, Type destination) Parameters source Type The source. destination Type The destination. Returns bool true if this instance can handle the specified types; otherwise, false. ConvertTo(JsonDocument, object?, Type) Converts the specified source. public object? ConvertTo(JsonDocument source, object? destination, Type destinationType) Parameters source JsonDocument The source. destination object The destination. destinationType Type Type of the destination. Returns object The converted value Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Maps the specified source to the destination. public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. Returns Expression The resulting expression. See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.JsonElementConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.JsonElementConverter.html",
    "title": "Class JsonElementConverter | ObjectCartographer API Reference",
    "summary": "Class JsonElementConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll JsonElement converter public class JsonElementConverter : IConverter Inheritance object JsonElementConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public bool CanHandle(Type source, Type destination) Parameters source Type The source. destination Type The destination. Returns bool true if this instance can handle the specified types; otherwise, false. ConvertTo(JsonElement, object?, Type) Converts the specified source. public object? ConvertTo(JsonElement source, object? destination, Type destinationType) Parameters source JsonElement The source. destination object The destination. destinationType Type Type of the destination. Returns object The converted value Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Maps the specified source to the destination. public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. Returns Expression The resulting expression. NullableConvertTo(JsonElement?, object?, Type) Converts the specified source. public object? NullableConvertTo(JsonElement? source, object? destination, Type destinationType) Parameters source JsonElement? The source. destination object The destination. destinationType Type Type of the destination. Returns object The converted value See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.KeyValuePairConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.KeyValuePairConverter.html",
    "title": "Class KeyValuePairConverter | ObjectCartographer API Reference",
    "summary": "Class KeyValuePairConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll Key value pair converter public class KeyValuePairConverter : IConverter Inheritance object KeyValuePairConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public bool CanHandle(Type sourceType, Type destinationType) Parameters sourceType Type Type of the source. destinationType Type Type of the destination. Returns bool true if this instance can handle the specified types; otherwise, false. Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Maps the specified source to the destination. public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. Returns Expression The resulting expression. See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.PrimitiveConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.PrimitiveConverter.html",
    "title": "Class PrimitiveConverter | ObjectCartographer API Reference",
    "summary": "Class PrimitiveConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll Primitive converter public class PrimitiveConverter : IConverter Inheritance object PrimitiveConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public bool CanHandle(Type sourceType, Type destinationType) Parameters sourceType Type Type of the source. destinationType Type Type of the destination. Returns bool true if this instance can handle the specified types; otherwise, false. Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. Returns Expression The resulting expression. See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.SameConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.SameConverter.html",
    "title": "Class SameConverter | ObjectCartographer API Reference",
    "summary": "Class SameConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll Same converter public class SameConverter : IConverter Inheritance object SameConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public bool CanHandle(Type sourceType, Type destinationType) Parameters sourceType Type Type of the source. destinationType Type Type of the destination. Returns bool true if this instance can handle the specified types; otherwise, false. Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. Returns Expression The resulting expression. See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.StringByteArrayConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.StringByteArrayConverter.html",
    "title": "Class StringByteArrayConverter | ObjectCartographer API Reference",
    "summary": "Class StringByteArrayConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll String/Byte array converter public class StringByteArrayConverter : IConverter Inheritance object StringByteArrayConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public bool CanHandle(Type sourceType, Type destinationType) Parameters sourceType Type Type of the source. destinationType Type Type of the destination. Returns bool true if this instance can handle the specified types; otherwise, false. GetBytes(string) Gets the bytes. public static byte[] GetBytes(string data) Parameters data string The data. Returns byte[] GetString(byte[]) Gets the bytes. public static string GetString(byte[] data) Parameters data byte[] The data. Returns string Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. Returns Expression The resulting expression. See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.StringParsingConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.StringParsingConverter.html",
    "title": "Class StringParsingConverter | ObjectCartographer API Reference",
    "summary": "Class StringParsingConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll String parsing converter public class StringParsingConverter : IConverter Inheritance object StringParsingConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public bool CanHandle(Type sourceType, Type destinationType) Parameters sourceType Type Type of the source. destinationType Type Type of the destination. Returns bool true if this instance can handle the specified types; otherwise, false. Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. Returns Expression The resulting expression. See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.ToDictionaryConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.ToDictionaryConverter.html",
    "title": "Class ToDictionaryConverter | ObjectCartographer API Reference",
    "summary": "Class ToDictionaryConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll To dictionary converter public class ToDictionaryConverter : ConverterBaseClass, IConverter Inheritance object ConverterBaseClass ToDictionaryConverter Implements IConverter Inherited Members ConverterBaseClass.Map(Expression, Expression, Type, Type, IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.CreateObject(Expression, Expression, PropertyInfo[], ConstructorInfo[], IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.ForEach(Expression, ParameterExpression, Expression) ConverterBaseClass.GetCopyConstructor(Type, Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public override int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public override bool CanHandle(Type source, Type destination) Parameters source Type The source. destination Type The destination. Returns bool true if this instance can handle the specified types; otherwise, false. CopyObject(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager, List<Expression>) Copies to dictionary. protected override Expression CopyObject(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager, List<Expression> expressions) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. expressions List<Expression> The expressions. Returns Expression The resulting expression. See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.ToStringConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.ToStringConverter.html",
    "title": "Class ToStringConverter | ObjectCartographer API Reference",
    "summary": "Class ToStringConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll ToString converter public class ToStringConverter : IConverter Inheritance object ToStringConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public bool CanHandle(Type sourceType, Type destinationType) Parameters sourceType Type Type of the source. destinationType Type Type of the destination. Returns bool true if this instance can handle the specified types; otherwise, false. Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. Returns Expression See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.TypeConverterConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.TypeConverterConverter.html",
    "title": "Class TypeConverterConverter | ObjectCartographer API Reference",
    "summary": "Class TypeConverterConverter Namespace ObjectCartographer.ExpressionBuilder.Converters Assembly ObjectCartographer.dll TypeConverter converter public class TypeConverterConverter : IConverter Inheritance object TypeConverterConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. public bool CanHandle(Type sourceType, Type destinationType) Parameters sourceType Type Type of the source. destinationType Type Type of the destination. Returns bool true if this instance can handle the specified types; otherwise, false. Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. Returns Expression The resulting expression. See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.html",
    "title": "Namespace ObjectCartographer.ExpressionBuilder.Converters | ObjectCartographer API Reference",
    "summary": "Namespace ObjectCartographer.ExpressionBuilder.Converters Classes ArrayIEnumerableConverter IEnumerable to array converter AssignableFromConverter Assignable from converter ClassToClassConverter Class to class converter DefaultConverter Default converters EnumConverter Enum converter FromDictionaryConverter From dictionary converter FromEnumConverter From enum converter FromJsonElementDictionaryConverter Json element dictionary converter ICollectionConverter Collection converter JsonDocumentConverter From JsonDocument converter JsonElementConverter JsonElement converter KeyValuePairConverter Key value pair converter PrimitiveConverter Primitive converter SameConverter Same converter StringByteArrayConverter String/Byte array converter StringParsingConverter String parsing converter ToDictionaryConverter To dictionary converter ToStringConverter ToString converter TypeConverterConverter TypeConverter converter"
  },
  "api/ObjectCartographer.ExpressionBuilder.ExpressionBuilderManager.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.ExpressionBuilderManager.html",
    "title": "Class ExpressionBuilderManager | ObjectCartographer API Reference",
    "summary": "Class ExpressionBuilderManager Namespace ObjectCartographer.ExpressionBuilder Assembly ObjectCartographer.dll Expression builder manager public class ExpressionBuilderManager Inheritance object ExpressionBuilderManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Constructors ExpressionBuilderManager(IEnumerable<IConverter>) Initializes a new instance of the ExpressionBuilderManager class. public ExpressionBuilderManager(IEnumerable<IConverter> expressionMappers) Parameters expressionMappers IEnumerable<IConverter> The expression mappers. Methods Map(Expression, Expression?, Type, Type, IExpressionMapping) Maps the specified source. public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. Returns Expression Map<TSource, TDestination>(TypeMapping<TSource, TDestination>) Converts the specified source and destination. public Func<TSource, TDestination, TDestination> Map<TSource, TDestination>(TypeMapping<TSource, TDestination> typeInfo) Parameters typeInfo TypeMapping<TSource, TDestination> The mapping. Returns Func<TSource, TDestination, TDestination> The resulting expression. Type Parameters TSource The type of the source. TDestination The type of the destination."
  },
  "api/ObjectCartographer.ExpressionBuilder.ExpressionMapping-2.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.ExpressionMapping-2.html",
    "title": "Class ExpressionMapping<TSource, TDestination> | ObjectCartographer API Reference",
    "summary": "Class ExpressionMapping<TSource, TDestination> Namespace ObjectCartographer.ExpressionBuilder Assembly ObjectCartographer.dll Expression mapping public class ExpressionMapping<TSource, TDestination> : IExpressionMapping Type Parameters TSource The type of the source. TDestination The type of the destination. Inheritance object ExpressionMapping<TSource, TDestination> Implements IExpressionMapping Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Constructors ExpressionMapping() Initializes a new instance of the ExpressionMapping<TSource, TDestination> class. public ExpressionMapping() Properties DestinationParameter Gets the destination parameter. public ParameterExpression DestinationParameter { get; } Property Value ParameterExpression The destination parameter. DestinationType Gets the type of the destination. public Type DestinationType { get; } Property Value Type The type of the destination. FinalExpression Gets or sets the final expression. public Expression? FinalExpression { get; set; } Property Value Expression The final expression. SourceParameter Gets the source parameter. public ParameterExpression SourceParameter { get; } Property Value ParameterExpression The source parameter. SourceType Gets the type of the source. public Type SourceType { get; } Property Value Type The type of the source. Variables Gets the variables. public List<ParameterExpression> Variables { get; } Property Value List<ParameterExpression> The variables. Methods AddVariable(Type) Adds the variable. public ParameterExpression? AddVariable(Type type) Parameters type Type The type. Returns ParameterExpression The new variable Build() Builds this instance. public Func<TSource, TDestination, TDestination> Build() Returns Func<TSource, TDestination, TDestination> The final function."
  },
  "api/ObjectCartographer.ExpressionBuilder.Interfaces.IConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Interfaces.IConverter.html",
    "title": "Interface IConverter | ObjectCartographer API Reference",
    "summary": "Interface IConverter Namespace ObjectCartographer.ExpressionBuilder.Interfaces Assembly ObjectCartographer.dll Converter interface public interface IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Gets the order. int Order { get; } Property Value int The order. Methods CanHandle(Type, Type) Determines whether this instance can handle the specified types. bool CanHandle(Type source, Type destination) Parameters source Type The source. destination Type The destination. Returns bool true if this instance can handle the specified types; otherwise, false. Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Maps the specified source to the destination. Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters source Expression The source. destination Expression The destination. sourceType Type Type of the source. destinationType Type Type of the destination. mapping IExpressionMapping The mapping. manager ExpressionBuilderManager The manager. Returns Expression The resulting expression."
  },
  "api/ObjectCartographer.ExpressionBuilder.Interfaces.IExpressionMapping.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Interfaces.IExpressionMapping.html",
    "title": "Interface IExpressionMapping | ObjectCartographer API Reference",
    "summary": "Interface IExpressionMapping Namespace ObjectCartographer.ExpressionBuilder.Interfaces Assembly ObjectCartographer.dll Expression mapping interface public interface IExpressionMapping Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties DestinationParameter Gets the destination parameter. ParameterExpression DestinationParameter { get; } Property Value ParameterExpression The destination parameter. DestinationType Gets the type of the destination. Type DestinationType { get; } Property Value Type The type of the destination. FinalExpression Gets the expressions. Expression? FinalExpression { get; set; } Property Value Expression The expressions. SourceParameter Gets the source parameter. ParameterExpression SourceParameter { get; } Property Value ParameterExpression The source parameter. SourceType Gets the type of the source. Type SourceType { get; } Property Value Type The type of the source. Variables Gets the variables. List<ParameterExpression> Variables { get; } Property Value List<ParameterExpression> The variables. Methods AddVariable(Type) Adds the variable. ParameterExpression? AddVariable(Type type) Parameters type Type The type. Returns ParameterExpression The new variable"
  },
  "api/ObjectCartographer.ExpressionBuilder.Interfaces.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Interfaces.html",
    "title": "Namespace ObjectCartographer.ExpressionBuilder.Interfaces | ObjectCartographer API Reference",
    "summary": "Namespace ObjectCartographer.ExpressionBuilder.Interfaces Interfaces IConverter Converter interface IExpressionMapping Expression mapping interface"
  },
  "api/ObjectCartographer.ExpressionBuilder.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.html",
    "title": "Namespace ObjectCartographer.ExpressionBuilder | ObjectCartographer API Reference",
    "summary": "Namespace ObjectCartographer.ExpressionBuilder Classes ExpressionBuilderManager Expression builder manager ExpressionMapping<TSource, TDestination> Expression mapping"
  },
  "api/ObjectCartographer.ExtensionMethods.CanisterExtensions.html": {
    "href": "api/ObjectCartographer.ExtensionMethods.CanisterExtensions.html",
    "title": "Class CanisterExtensions | ObjectCartographer API Reference",
    "summary": "Class CanisterExtensions Namespace ObjectCartographer.ExtensionMethods Assembly ObjectCartographer.dll Canister extension methods public static class CanisterExtensions Inheritance object CanisterExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterObjectCartographer(ICanisterConfiguration?) Registers the big book of data types. public static ICanisterConfiguration? RegisterObjectCartographer(this ICanisterConfiguration? bootstrapper) Parameters bootstrapper ICanisterConfiguration The bootstrapper. Returns ICanisterConfiguration The bootstrapper RegisterObjectCartographer(IServiceCollection?) Registers the ObjectCartographer services. public static IServiceCollection? RegisterObjectCartographer(this IServiceCollection? services) Parameters services IServiceCollection The service collection to add the services to. Returns IServiceCollection The updated service collection."
  },
  "api/ObjectCartographer.ExtensionMethods.html": {
    "href": "api/ObjectCartographer.ExtensionMethods.html",
    "title": "Namespace ObjectCartographer.ExtensionMethods | ObjectCartographer API Reference",
    "summary": "Namespace ObjectCartographer.ExtensionMethods Classes CanisterExtensions Canister extension methods"
  },
  "api/ObjectCartographer.Interfaces.IInternalTypeMapping.html": {
    "href": "api/ObjectCartographer.Interfaces.IInternalTypeMapping.html",
    "title": "Interface IInternalTypeMapping | ObjectCartographer API Reference",
    "summary": "Interface IInternalTypeMapping Namespace ObjectCartographer.Interfaces Assembly ObjectCartographer.dll Type mapping interface public interface IInternalTypeMapping Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Properties Gets the properties. List<IPropertyMapping> Properties { get; } Property Value List<IPropertyMapping> The properties. TypeInfo Gets the type information. TypeTuple TypeInfo { get; } Property Value TypeTuple The type information."
  },
  "api/ObjectCartographer.Interfaces.IPropertyMapping.html": {
    "href": "api/ObjectCartographer.Interfaces.IPropertyMapping.html",
    "title": "Interface IPropertyMapping | ObjectCartographer API Reference",
    "summary": "Interface IPropertyMapping Namespace ObjectCartographer.Interfaces Assembly ObjectCartographer.dll Property mapping interface public interface IPropertyMapping Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Destination Gets the destination. MethodInfo Destination { get; } Property Value MethodInfo The destination. DestinationTarget Gets the destination target. object? DestinationTarget { get; } Property Value object The destination target. Source Gets the source. MethodInfo Source { get; } Property Value MethodInfo The source. SourceTarget Gets the source target. object? SourceTarget { get; } Property Value object The source target."
  },
  "api/ObjectCartographer.Interfaces.ITypeMapping.html": {
    "href": "api/ObjectCartographer.Interfaces.ITypeMapping.html",
    "title": "Interface ITypeMapping | ObjectCartographer API Reference",
    "summary": "Interface ITypeMapping Namespace ObjectCartographer.Interfaces Assembly ObjectCartographer.dll Type mapping interface public interface ITypeMapping Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Methods AutoMap() Automatically maps the two types. ITypeMapping AutoMap() Returns ITypeMapping This. Build() Builds this instance. void Build()"
  },
  "api/ObjectCartographer.Interfaces.html": {
    "href": "api/ObjectCartographer.Interfaces.html",
    "title": "Namespace ObjectCartographer.Interfaces | ObjectCartographer API Reference",
    "summary": "Namespace ObjectCartographer.Interfaces Interfaces IInternalTypeMapping Type mapping interface IPropertyMapping Property mapping interface ITypeMapping Type mapping interface"
  },
  "api/ObjectCartographer.Internal.DefaultValueLookup.html": {
    "href": "api/ObjectCartographer.Internal.DefaultValueLookup.html",
    "title": "Class DefaultValueLookup | ObjectCartographer API Reference",
    "summary": "Class DefaultValueLookup Namespace ObjectCartographer.Internal Assembly ObjectCartographer.dll Default value lookup public static class DefaultValueLookup Inheritance object DefaultValueLookup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Values The values public static Dictionary<int, object?> Values Field Value Dictionary<int, object>"
  },
  "api/ObjectCartographer.Internal.PropertyMapping-3.html": {
    "href": "api/ObjectCartographer.Internal.PropertyMapping-3.html",
    "title": "Class PropertyMapping<TLeft, TRight, TLeftPropertyType> | ObjectCartographer API Reference",
    "summary": "Class PropertyMapping<TLeft, TRight, TLeftPropertyType> Namespace ObjectCartographer.Internal Assembly ObjectCartographer.dll Property mapping public class PropertyMapping<TLeft, TRight, TLeftPropertyType> : IPropertyMapping Type Parameters TLeft The type of the left. TRight The type of the right. TLeftPropertyType The type of the right property type. Inheritance object PropertyMapping<TLeft, TRight, TLeftPropertyType> Implements IPropertyMapping Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Constructors PropertyMapping(Func<TLeft, TLeftPropertyType>, Action<TRight, TLeftPropertyType>) Initializes a new instance of the PropertyMapping<TLeft, TRight, TLeftPropertyType> class. public PropertyMapping(Func<TLeft, TLeftPropertyType> leftProperty, Action<TRight, TLeftPropertyType> rightProperty) Parameters leftProperty Func<TLeft, TLeftPropertyType> The left property. rightProperty Action<TRight, TLeftPropertyType> The right property. Properties Destination Gets the destination. public MethodInfo Destination { get; } Property Value MethodInfo The destination. DestinationTarget Gets the destination target. public object? DestinationTarget { get; } Property Value object The destination target. Source Gets the source. public MethodInfo Source { get; } Property Value MethodInfo The source. SourceTarget Gets the source target. public object? SourceTarget { get; } Property Value object The source target. See Also IPropertyMapping"
  },
  "api/ObjectCartographer.Internal.TypeTuple.html": {
    "href": "api/ObjectCartographer.Internal.TypeTuple.html",
    "title": "Struct TypeTuple | ObjectCartographer API Reference",
    "summary": "Struct TypeTuple Namespace ObjectCartographer.Internal Assembly ObjectCartographer.dll Type tuple public readonly struct TypeTuple : IEquatable<TypeTuple> Implements IEquatable<TypeTuple> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Constructors TypeTuple(Type, Type) Initializes a new instance of the TypeTuple struct. public TypeTuple(Type source, Type destination) Parameters source Type The source. destination Type The destination. Properties Destination Gets the destination. public Type Destination { get; } Property Value Type The destination. Source Gets the source. public Type Source { get; } Property Value Type The source. Methods Equals(TypeTuple) Indicates whether the current object is equal to another object of the same type. public bool Equals(TypeTuple other) Parameters other TypeTuple An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object, is equal to this instance. public override bool Equals(object? obj) Parameters obj object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Operators operator ==(TypeTuple, TypeTuple) Implements the operator ==. public static bool operator ==(TypeTuple left, TypeTuple right) Parameters left TypeTuple Left parameter right TypeTuple Right parameter Returns bool The result of the operator. operator !=(TypeTuple, TypeTuple) Implements the operator !=. public static bool operator !=(TypeTuple left, TypeTuple right) Parameters left TypeTuple Left parameter right TypeTuple Right parameter Returns bool The result of the operator. See Also IEquatable<T>"
  },
  "api/ObjectCartographer.Internal.html": {
    "href": "api/ObjectCartographer.Internal.html",
    "title": "Namespace ObjectCartographer.Internal | ObjectCartographer API Reference",
    "summary": "Namespace ObjectCartographer.Internal Classes DefaultValueLookup Default value lookup PropertyMapping<TLeft, TRight, TLeftPropertyType> Property mapping Structs TypeTuple Type tuple"
  },
  "api/ObjectCartographer.Modules.CanisterModule.html": {
    "href": "api/ObjectCartographer.Modules.CanisterModule.html",
    "title": "Class CanisterModule | ObjectCartographer API Reference",
    "summary": "Class CanisterModule Namespace ObjectCartographer.Modules Assembly ObjectCartographer.dll Canister module public class CanisterModule : IModule Inheritance object CanisterModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Properties Order Order to run this in public int Order { get; } Property Value int Methods Load(IServiceCollection?) Loads the module using the bootstrapper public void Load(IServiceCollection? bootstrapper) Parameters bootstrapper IServiceCollection The bootstrapper. See Also IModule"
  },
  "api/ObjectCartographer.Modules.html": {
    "href": "api/ObjectCartographer.Modules.html",
    "title": "Namespace ObjectCartographer.Modules | ObjectCartographer API Reference",
    "summary": "Namespace ObjectCartographer.Modules Classes CanisterModule Canister module"
  },
  "api/ObjectCartographer.ObjectExtensions.html": {
    "href": "api/ObjectCartographer.ObjectExtensions.html",
    "title": "Class ObjectExtensions | ObjectCartographer API Reference",
    "summary": "Class ObjectExtensions Namespace ObjectCartographer Assembly ObjectCartographer.dll Object extensions public static class ObjectExtensions Inheritance object ObjectExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AutoMap(object?, Type) Automatically maps the object to the destination type. public static void AutoMap(this object? item, Type destinationType) Parameters item object The item. destinationType Type Type of the destination. AutoMap<TDestination>(object?) Automatically maps the object to the destination type. public static void AutoMap<TDestination>(this object? item) Parameters item object The item. Type Parameters TDestination The type of the destination. AutoMap<TSource, TDestination>(TSource) Automatically maps the object to the destination type. public static TSource AutoMap<TSource, TDestination>(this TSource item) Parameters item TSource The item. Returns TSource Type Parameters TSource The type of the source. TDestination The type of the destination. Map<TSource, TDestination>(TSource) Maps the specified two types together. public static TypeMapping<TSource, TDestination>? Map<TSource, TDestination>(this TSource item) Parameters item TSource The item. Returns TypeMapping<TSource, TDestination> The type mapping object. Type Parameters TSource The type of the source. TDestination The type of the destination. To(object?, Type, object?) Attempts to convert the object to another type and returns the value public static object? To(this object? item, Type resultType, object? defaultValue) Parameters item object Object to convert resultType Type Result type defaultValue object Default value to return if there is an issue or it can't be converted Returns object The object converted to the other type or the default value if there is an error or can't be converted To<TReturn>(object?, TReturn) Attempts to convert the object to another type and returns the value public static TReturn To<TReturn>(this object? item, TReturn defaultValue = default) Parameters item object Object to convert defaultValue TReturn Default value to return if there is an issue or it can't be converted Returns TReturn The object converted to the other type or the default value if there is an error or can't be converted Type Parameters TReturn Return type"
  },
  "api/ObjectCartographer.TypeMapping-2.html": {
    "href": "api/ObjectCartographer.TypeMapping-2.html",
    "title": "Class TypeMapping<TSource, TDestination> | ObjectCartographer API Reference",
    "summary": "Class TypeMapping<TSource, TDestination> Namespace ObjectCartographer Assembly ObjectCartographer.dll Type mapping public class TypeMapping<TSource, TDestination> : ITypeMapping, IInternalTypeMapping Type Parameters TSource The type of the source. TDestination The type of the destination. Inheritance object TypeMapping<TSource, TDestination> Implements ITypeMapping IInternalTypeMapping Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) Constructors TypeMapping(TypeTuple, ILogger?, ExpressionBuilderManager?) Initializes a new instance of the TypeMapping<TSource, TDestination> class. public TypeMapping(TypeTuple typeInfo, ILogger? logger, ExpressionBuilderManager? expressionBuilder) Parameters typeInfo TypeTuple The type information. logger ILogger The logger. expressionBuilder ExpressionBuilderManager The expression builder. Properties Converter Gets or sets the converter. public Func<TSource, TDestination, TDestination>? Converter { get; } Property Value Func<TSource, TDestination, TDestination> The converter. Properties Gets the mappings. public List<IPropertyMapping> Properties { get; } Property Value List<IPropertyMapping> The mappings. TypeInfo Gets the type information. public TypeTuple TypeInfo { get; } Property Value TypeTuple The type information. Methods AddMapping<TSourceProperty>(Func<TSource, TSourceProperty>, Action<TDestination, TSourceProperty>) Adds the mapping specified. public TypeMapping<TSource, TDestination> AddMapping<TSourceProperty>(Func<TSource, TSourceProperty> leftExpression, Action<TDestination, TSourceProperty> rightExpression) Parameters leftExpression Func<TSource, TSourceProperty> The left expression. rightExpression Action<TDestination, TSourceProperty> The right expression. Returns TypeMapping<TSource, TDestination> This. Type Parameters TSourceProperty AutoMap() Automatically maps the two types. public ITypeMapping AutoMap() Returns ITypeMapping This. Build() Builds this instance. public void Build() UseMethod(Func<TSource, TDestination, TDestination>) Uses the method supplied instead of building out a converter. public TypeMapping<TSource, TDestination> UseMethod(Func<TSource, TDestination, TDestination> func) Parameters func Func<TSource, TDestination, TDestination> The function. Returns TypeMapping<TSource, TDestination> This. See Also ITypeMapping"
  },
  "api/ObjectCartographer.html": {
    "href": "api/ObjectCartographer.html",
    "title": "Namespace ObjectCartographer | ObjectCartographer API Reference",
    "summary": "Namespace ObjectCartographer Classes DataMapper Data mapper ObjectExtensions Object extensions TypeMapping<TSource, TDestination> Type mapping"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | ObjectCartographer API Reference",
    "summary": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | ObjectCartographer API Reference",
    "summary": "Code using Microsoft.Extensions.DependencyInjection; using System.Dynamic; using System.Text; namespace ObjectCartographer.Example { internal class Program { private static void Main(string[] args) { ServiceProvider? Collection = new ServiceCollection().AddCanisterModules()?.BuildServiceProvider(); if (Collection is null) return; // Create an object of type TestType2 from an object of type TestType1 and copy the // value of A TestType2 Result = new TestType1 { A = 10 }.To<TestType2>(); Console.WriteLine(Result.A); // Copy the value of A from an object of type TestType1 to an object of type TestType2 TestType2 Result2 = new TestType1 { A = 20 }.To(new TestType2()); Console.WriteLine(Result2.A); // Convert the string \"Example String\" to a byte array and then back to a string var Result3 = \"Example String\".To<byte[]>(); Console.WriteLine(Encoding.UTF8.GetString(Result3)); Console.WriteLine(Result3.To<string>()); // Convert an ExpandoObject to a Dictionary<string, object> dynamic ExpandoTest = new ExpandoObject(); ExpandoTest.A = 55; ExpandoTest.B = \"Test\"; dynamic Result4 = ((ExpandoObject)ExpandoTest).To<Dictionary<string, object>>(); Console.WriteLine(Result4[\"A\"]); Console.WriteLine(Result4[\"B\"]); } } /// <summary> /// Test class 1 /// </summary> internal class TestType1 { /// <summary> /// Gets or sets a. /// </summary> /// <value>a.</value> public int A { get; set; } } /// <summary> /// Test class 2 /// </summary> internal class TestType2 { /// <summary> /// Gets or sets a. /// </summary> /// <value>a.</value> public int A { get; set; } } } Output 10 20 Example String Example String 55 Test"
  },
  "index.html": {
    "href": "index.html",
    "title": "ObjectCartographer | ObjectCartographer API Reference",
    "summary": "ObjectCartographer ObjectCartographer is a fast, convention based, and developer friendly object to object mapper. It's designed to simplify your life and remove the drudgery of writing code to copy data from one object to another. Setting Up the Library Register ObjectCartographer with your IoC container during startup. Example code: ServiceProvider? ServiceProvider = new ServiceCollection().RegisterObjectCartographer()?.BuildServiceProvider(); or ServiceProvider? ServiceProvider = new ServiceCollection().AddCanisterModules()?.BuildServiceProvider(); As the library supports Canister Modules. With that ObjectCartographer will automatically register any converters found in your application and work with your DI system if you are using one, allowing you to access the DataMapper object at run time if you need to. Otherwise if you are not using one, you can simply use the extension methods and it will wire itself up. Basic Usage Once the initial setup is done, we need to map our objects to each other. This is accomplished in a number of different ways. First by using the DataMapper class: DataMapper.Map<MyClass1, MyClass2>() .AddMapping(MyClass1 => MyClass1.PropertyToReadFrom, (MyClass2, value) => MyClass2.PropertyToWriteTo = value) .AddMapping(MyClass1 => MyClass1.Property1 + MyClass1.Property2, (MyClass1, value) => MyClass2.ComputedProperty = value) .AddMapping(MyClass1 => MyClass1.A.B.C.D, (MyClass1, value) => MyClass2.ProjectionProperty = value) .Build(); The above code could also be written using the extension method Map: MyClass1Object.Map<MyClass1, MyClass2>() .AddMapping(MyClass1 => MyClass1.PropertyToReadFrom, (MyClass2, value) => MyClass2.PropertyToWriteTo = value) .AddMapping(MyClass1 => MyClass1.Property1 + MyClass1.Property2, (MyClass1, value) => MyClass2.ComputedProperty = value) .AddMapping(MyClass1 => MyClass1.A.B.C.D, (MyClass1, value) => MyClass2.ProjectionProperty = value) .Build(); You can also supply your own method for copying the data: MyClass1Object.Map<MyClass1, MyClass2>() .UseMethod(MyCopier) .Build(); It's also possible, if you'd prefer, for the system to map everything for you based on the conventions that the system uses: DataMapper.AutoMap<MyClass1, MyClass2>(); Or: MyClass1Object.AutoMap<MyClass2>(); And lastly, you can simply skip the above steps all together and simply start using the library: MyClass2 Result = MyClass1Object.To<MyClass2>(); If you don't set up the mapping beforehand, the library will go through the properties on MyClass1 and map them to properties with the same name on MyClass2. It compares the property names by first looking for exact matches, then it will drop underscores and compare them ignoring case. Give Me Speed The library is about 34% faster than AutoMapper in more complex scenarios: BenchmarkDotNet=v0.13.0, OS=Windows 10.0.18363.1440 (1909/November2019Update/19H2) Intel Core i7-9850H CPU 2.60GHz, 1 CPU, 12 logical and 6 physical cores .NET SDK=5.0.203 [Host] : .NET 5.0.6 (5.0.621.22011), X64 RyuJIT DefaultJob : .NET 5.0.6 (5.0.621.22011), X64 RyuJIT Method Mean Error StdDev Ratio RatioSD Rank AutoMapper 91.575 ns 0.9259 ns 0.8661 ns 1.34 0.02 2 ObjectCartographer 68.374 ns 0.6952 ns 0.6163 ns 1.00 0.00 1 And about 350% faster when an object is supplied to it and only data copying is required. BenchmarkDotNet=v0.13.0, OS=Windows 10.0.18363.1440 (1909/November2019Update/19H2) Intel Core i7-9850H CPU 2.60GHz, 1 CPU, 12 logical and 6 physical cores .NET SDK=5.0.203 [Host] : .NET 5.0.6 (5.0.621.22011), X64 RyuJIT DefaultJob : .NET 5.0.6 (5.0.621.22011), X64 RyuJIT Method Mean Error StdDev Median Ratio RatioSD Rank AutoMapper 88.796 ns 1.4598 ns 3.2951 ns 87.404 ns 3.48 0.16 2 ObjectCartographer 26.804 ns 0.2989 ns 0.2650 ns 26.712 ns 1.00 0.00 1 Installation The library is available via Nuget with the package name \"ObjectCartographer\". To install it run the following command in the Package Manager Console: Install-Package ObjectCartographer Note that there is a package that adds mapping for ADO.Net specific data types: \"ObjectCartographer.SQL\" so the system can do things like map DbType to SqlDbType along with other functionality. FAQ How do I add my own converter to the system? You would need to implement the ObjectCartographer.ExpressionBuilder.Interfaces.IConverter interface. There is also the ObjectCartographer.ExpressionBuilder.BaseClasses.ConverterBaseClass abstract class to help with destination object creation/copy constructor discovery which is good in instances where you are mapping more complex objects. For simple data conversions like string to an int, the IConverter interface should be enough. Build Process In order to build the library you may require the following: Visual Studio 2022 Other than that, just clone the project and you should be able to load the solution and build without too much effort."
  }
}