{
  "api/Microsoft.Extensions.DependencyInjection.CanisterExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.CanisterExtensions.html",
    "title": "Class CanisterExtensions | ObjectCartographer API Reference",
    "keywords": "Class CanisterExtensions Canister extension methods Inheritance object CanisterExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: ObjectCartographer.dll Syntax public static class CanisterExtensions Methods | Improve this Doc View Source RegisterObjectCartographer(ICanisterConfiguration?) Registers the big book of data types. Declaration public static ICanisterConfiguration? RegisterObjectCartographer(this ICanisterConfiguration? bootstrapper) Parameters Type Name Description ICanisterConfiguration bootstrapper The bootstrapper. Returns Type Description ICanisterConfiguration The bootstrapper"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | ObjectCartographer API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes CanisterExtensions Canister extension methods"
  },
  "api/ObjectCartographer.DataMapper.html": {
    "href": "api/ObjectCartographer.DataMapper.html",
    "title": "Class DataMapper | ObjectCartographer API Reference",
    "keywords": "Class DataMapper Data mapper Inheritance object DataMapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer Assembly: ObjectCartographer.dll Syntax public class DataMapper Constructors | Improve this Doc View Source DataMapper() Initializes a new instance of the DataMapper class. Declaration public DataMapper() | Improve this Doc View Source DataMapper(ExpressionBuilderManager, ILogger<DataMapper>?) Initializes a new instance of the DataMapper class. Declaration public DataMapper(ExpressionBuilderManager expressionBuilder, ILogger<DataMapper>? logger = null) Parameters Type Name Description ExpressionBuilderManager expressionBuilder The expression builder. ILogger<DataMapper> logger The logger. Methods | Improve this Doc View Source AutoMap(Type, Type) Automatically maps the two types. Declaration public DataMapper AutoMap(Type first, Type second) Parameters Type Name Description Type first The first. Type second The second. Returns Type Description DataMapper This. | Improve this Doc View Source AutoMap<TFirst, TSecond>() Automatically maps the two types. Declaration public DataMapper AutoMap<TFirst, TSecond>() Returns Type Description DataMapper This. Type Parameters Name Description TFirst The type of the first. TSecond The type of the second. | Improve this Doc View Source Copy(object?, object?, Type?) Copies the specified source to the destination Declaration public object? Copy(object? source, object? destination, Type? destinationType = null) Parameters Type Name Description object source The source. object destination The destination. Type destinationType Type of the destination (if null, system uses the type of the destination object). Returns Type Description object The resulting object. | Improve this Doc View Source Copy<TDestination>(object?, TDestination) Copies the specified source to the destination object (or a new TDestination object if one is not passed in). Declaration public TDestination Copy<TDestination>(object? source, TDestination destination = default) Parameters Type Name Description object source The source. TDestination destination The destination. Returns Type Description TDestination The resulting object Type Parameters Name Description TDestination The type of the destination. | Improve this Doc View Source Copy<TSource, TDestination>(TSource, TDestination) Copies the specified source to the destination object (or a new TDestination object if one is not passed in). Declaration public TDestination Copy<TSource, TDestination>(TSource source, TDestination destination = default) Parameters Type Name Description TSource source The source. TDestination destination The destination. Returns Type Description TDestination The resulting object Type Parameters Name Description TSource The type of the source. TDestination The type of the destination. | Improve this Doc View Source Map(Type, Type) Maps the specified source to the destination. Declaration public ITypeMapping? Map(Type source, Type destination) Parameters Type Name Description Type source The source. Type destination The destination. Returns Type Description ITypeMapping The type mapping. | Improve this Doc View Source Map<TSource, TDestination>() Maps the source type to the destination type Declaration public TypeMapping<TSource, TDestination>? Map<TSource, TDestination>() Returns Type Description TypeMapping<TSource, TDestination> The type mapping. Type Parameters Name Description TSource The type of the source. TDestination The type of the destination. Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn)"
  },
  "api/ObjectCartographer.ExpressionBuilder.BaseClasses.ConverterBaseClass.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.BaseClasses.ConverterBaseClass.html",
    "title": "Class ConverterBaseClass | ObjectCartographer API Reference",
    "keywords": "Class ConverterBaseClass Converter base class Inheritance object ConverterBaseClass ClassToClassConverter FromDictionaryConverter FromJsonElementDictionaryConverter ICollectionConverter ToDictionaryConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.BaseClasses Assembly: ObjectCartographer.dll Syntax public abstract class ConverterBaseClass : IConverter Constructors | Improve this Doc View Source ConverterBaseClass() Initializes a new instance of the ConverterBaseClass class. Declaration protected ConverterBaseClass() See Also IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public abstract int Order { get; } Property Value Type Description int The order. See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public abstract bool CanHandle(Type source, Type destination) Parameters Type Name Description Type source The source. Type destination The destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. See Also IConverter | Improve this Doc View Source CopyObject(Expression, Expression, Type, Type, IExpressionMapping, ExpressionBuilderManager, List<Expression>) Copies the object after object is created. Declaration protected abstract Expression CopyObject(Expression source, Expression destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager, List<Expression> expressions) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. List<Expression> expressions The expressions. Returns Type Description Expression The resulting expression. See Also IConverter | Improve this Doc View Source CreateObject(Expression, Expression, PropertyInfo[], ConstructorInfo[], IExpressionMapping, ExpressionBuilderManager) Creates the object. Declaration protected Expression CreateObject(Expression destinationVariable, Expression sourceVariable, PropertyInfo[] sourceProperties, ConstructorInfo[] destinationConstructors, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters Type Name Description Expression destinationVariable The destination variable. Expression sourceVariable The source variable. PropertyInfo[] sourceProperties The source properties. ConstructorInfo[] destinationConstructors The destination constructors. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. Returns Type Description Expression See Also IConverter | Improve this Doc View Source ForEach(Expression, ParameterExpression, Expression) Foreach loop helper method. Declaration protected Expression ForEach(Expression collection, ParameterExpression loopVar, Expression loopContent) Parameters Type Name Description Expression collection The collection. ParameterExpression loopVar The loop variable. Expression loopContent Content of the loop. Returns Type Description Expression The resulting expression See Also IConverter | Improve this Doc View Source GetCopyConstructor(Type, Type) Gets the constructor. Declaration protected ConstructorInfo? GetCopyConstructor(Type source, Type destination) Parameters Type Name Description Type source The source. Type destination The destination. Returns Type Description ConstructorInfo See Also IConverter | Improve this Doc View Source Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Maps the specified source to the destination. Declaration public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. Returns Type Description Expression The resulting expression. See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.BaseClasses.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.BaseClasses.html",
    "title": "Namespace ObjectCartographer.ExpressionBuilder.BaseClasses | ObjectCartographer API Reference",
    "keywords": "Namespace ObjectCartographer.ExpressionBuilder.BaseClasses Classes ConverterBaseClass Converter base class"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.ArrayIEnumerableConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.ArrayIEnumerableConverter.html",
    "title": "Class ArrayIEnumerableConverter | ObjectCartographer API Reference",
    "keywords": "Class ArrayIEnumerableConverter IEnumerable to array converter Inheritance object ArrayIEnumerableConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class ArrayIEnumerableConverter : IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public bool CanHandle(Type sourceType, Type destinationType) Parameters Type Name Description Type sourceType Type of the source. Type destinationType Type of the destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. See Also IConverter | Improve this Doc View Source Conversion<TSource, TDestination>(IEnumerable<TSource>, TDestination[]) Conversions the specified source. Declaration public TDestination[] Conversion<TSource, TDestination>(IEnumerable<TSource> source, TDestination[] destination) Parameters Type Name Description IEnumerable<TSource> source The source. TDestination[] destination The destination. Returns Type Description TDestination[] Type Parameters Name Description TSource The type of the source. TDestination The type of the destination. See Also IConverter | Improve this Doc View Source Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. Declaration public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. Returns Type Description Expression The resulting expression. See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.AssignableFromConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.AssignableFromConverter.html",
    "title": "Class AssignableFromConverter | ObjectCartographer API Reference",
    "keywords": "Class AssignableFromConverter Assignable from converter Inheritance object AssignableFromConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class AssignableFromConverter : IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public bool CanHandle(Type sourceType, Type destinationType) Parameters Type Name Description Type sourceType Type of the source. Type destinationType Type of the destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. See Also IConverter | Improve this Doc View Source Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Maps the specified source to the destination. Declaration public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. Returns Type Description Expression The resulting expression. See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.ClassToClassConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.ClassToClassConverter.html",
    "title": "Class ClassToClassConverter | ObjectCartographer API Reference",
    "keywords": "Class ClassToClassConverter Class to class converter Inheritance object ConverterBaseClass ClassToClassConverter Implements IConverter Inherited Members ConverterBaseClass.Map(Expression, Expression, Type, Type, IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.CreateObject(Expression, Expression, PropertyInfo[], ConstructorInfo[], IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.ForEach(Expression, ParameterExpression, Expression) ConverterBaseClass.GetCopyConstructor(Type, Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class ClassToClassConverter : ConverterBaseClass, IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public override int Order { get; } Property Value Type Description int The order. Overrides ConverterBaseClass.Order See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public override bool CanHandle(Type sourceType, Type destinationType) Parameters Type Name Description Type sourceType Type of the source. Type destinationType Type of the destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. Overrides ConverterBaseClass.CanHandle(Type, Type) See Also IConverter | Improve this Doc View Source CopyObject(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager, List<Expression>) Copies the properties. Declaration protected override Expression CopyObject(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager, List<Expression> expressions) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. List<Expression> expressions The expressions. Returns Type Description Expression Overrides ConverterBaseClass.CopyObject(Expression, Expression, Type, Type, IExpressionMapping, ExpressionBuilderManager, List<Expression>) See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.DefaultConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.DefaultConverter.html",
    "title": "Class DefaultConverter | ObjectCartographer API Reference",
    "keywords": "Class DefaultConverter Default converters Inheritance object DefaultConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class DefaultConverter : IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public bool CanHandle(Type sourceType, Type destinationType) Parameters Type Name Description Type sourceType Type of the source. Type destinationType Type of the destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. See Also IConverter | Improve this Doc View Source ConvertTo(object?, object?, Type) Converts to. Declaration public object? ConvertTo(object? item, object? destination, Type destinationType) Parameters Type Name Description object item The item. object destination The destination. Type destinationType Type of the destination. Returns Type Description object See Also IConverter | Improve this Doc View Source Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. Declaration public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. Returns Type Description Expression The resulting expression. See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.EnumConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.EnumConverter.html",
    "title": "Class EnumConverter | ObjectCartographer API Reference",
    "keywords": "Class EnumConverter Enum converter Inheritance object EnumConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class EnumConverter : IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public bool CanHandle(Type sourceType, Type destinationType) Parameters Type Name Description Type sourceType Type of the source. Type destinationType Type of the destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. See Also IConverter | Improve this Doc View Source Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. Declaration public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. Returns Type Description Expression The resulting expression. See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.FromDictionaryConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.FromDictionaryConverter.html",
    "title": "Class FromDictionaryConverter | ObjectCartographer API Reference",
    "keywords": "Class FromDictionaryConverter From dictionary converter Inheritance object ConverterBaseClass FromDictionaryConverter Implements IConverter Inherited Members ConverterBaseClass.Map(Expression, Expression, Type, Type, IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.CreateObject(Expression, Expression, PropertyInfo[], ConstructorInfo[], IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.ForEach(Expression, ParameterExpression, Expression) ConverterBaseClass.GetCopyConstructor(Type, Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class FromDictionaryConverter : ConverterBaseClass, IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public override int Order { get; } Property Value Type Description int The order. Overrides ConverterBaseClass.Order See Also ConverterBaseClass Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public override bool CanHandle(Type source, Type destination) Parameters Type Name Description Type source The source. Type destination The destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. Overrides ConverterBaseClass.CanHandle(Type, Type) See Also ConverterBaseClass | Improve this Doc View Source CopyObject(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager, List<Expression>) Copies to dictionary. Declaration protected override Expression CopyObject(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager, List<Expression> expressions) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. List<Expression> expressions The expressions. Returns Type Description Expression The resulting expression. Overrides ConverterBaseClass.CopyObject(Expression, Expression, Type, Type, IExpressionMapping, ExpressionBuilderManager, List<Expression>) See Also ConverterBaseClass | Improve this Doc View Source TryGetValue(IDictionary<string, object>, string, out object?) Tries the get value. Declaration public bool TryGetValue(IDictionary<string, object> dictionary, string key, out object? value) Parameters Type Name Description IDictionary<string, object> dictionary The dictionary. string key The key. object value The value. Returns Type Description bool See Also ConverterBaseClass Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also ConverterBaseClass"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.FromEnumConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.FromEnumConverter.html",
    "title": "Class FromEnumConverter | ObjectCartographer API Reference",
    "keywords": "Class FromEnumConverter From enum converter Inheritance object FromEnumConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class FromEnumConverter : IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public bool CanHandle(Type sourceType, Type destinationType) Parameters Type Name Description Type sourceType Type of the source. Type destinationType Type of the destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. See Also IConverter | Improve this Doc View Source Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. Declaration public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. Returns Type Description Expression The resulting expression. See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.FromJsonElementDictionaryConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.FromJsonElementDictionaryConverter.html",
    "title": "Class FromJsonElementDictionaryConverter | ObjectCartographer API Reference",
    "keywords": "Class FromJsonElementDictionaryConverter Json element dictionary converter Inheritance object ConverterBaseClass FromJsonElementDictionaryConverter Implements IConverter Inherited Members ConverterBaseClass.Map(Expression, Expression, Type, Type, IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.CreateObject(Expression, Expression, PropertyInfo[], ConstructorInfo[], IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.ForEach(Expression, ParameterExpression, Expression) ConverterBaseClass.GetCopyConstructor(Type, Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class FromJsonElementDictionaryConverter : ConverterBaseClass, IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public override int Order { get; } Property Value Type Description int The order. Overrides ConverterBaseClass.Order See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public override bool CanHandle(Type source, Type destination) Parameters Type Name Description Type source The source. Type destination The destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. Overrides ConverterBaseClass.CanHandle(Type, Type) See Also IConverter | Improve this Doc View Source CopyObject(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager, List<Expression>) Copies to dictionary. Declaration protected override Expression CopyObject(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager, List<Expression> expressions) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. List<Expression> expressions The expressions. Returns Type Description Expression The resulting expression. Overrides ConverterBaseClass.CopyObject(Expression, Expression, Type, Type, IExpressionMapping, ExpressionBuilderManager, List<Expression>) See Also IConverter | Improve this Doc View Source TryGetValue(IDictionary<string, JsonElement>, string, out JsonElement?) Tries the get value. Declaration public bool TryGetValue(IDictionary<string, JsonElement> dictionary, string key, out JsonElement? value) Parameters Type Name Description IDictionary<string, JsonElement> dictionary The dictionary. string key The key. JsonElement? value The value. Returns Type Description bool See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.ICollectionConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.ICollectionConverter.html",
    "title": "Class ICollectionConverter | ObjectCartographer API Reference",
    "keywords": "Class ICollectionConverter Collection converter Inheritance object ConverterBaseClass ICollectionConverter Implements IConverter Inherited Members ConverterBaseClass.Map(Expression, Expression, Type, Type, IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.CreateObject(Expression, Expression, PropertyInfo[], ConstructorInfo[], IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.ForEach(Expression, ParameterExpression, Expression) ConverterBaseClass.GetCopyConstructor(Type, Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class ICollectionConverter : ConverterBaseClass, IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public override int Order { get; } Property Value Type Description int The order. Overrides ConverterBaseClass.Order See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public override bool CanHandle(Type sourceType, Type destinationType) Parameters Type Name Description Type sourceType Type of the source. Type destinationType Type of the destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. Overrides ConverterBaseClass.CanHandle(Type, Type) See Also IConverter | Improve this Doc View Source CopyObject(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager, List<Expression>) Copies to collection. Declaration protected override Expression CopyObject(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager, List<Expression> expressions) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. List<Expression> expressions The expressions. Returns Type Description Expression Overrides ConverterBaseClass.CopyObject(Expression, Expression, Type, Type, IExpressionMapping, ExpressionBuilderManager, List<Expression>) See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.JsonDocumentConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.JsonDocumentConverter.html",
    "title": "Class JsonDocumentConverter | ObjectCartographer API Reference",
    "keywords": "Class JsonDocumentConverter From JsonDocument converter Inheritance object JsonDocumentConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class JsonDocumentConverter : IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public bool CanHandle(Type source, Type destination) Parameters Type Name Description Type source The source. Type destination The destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. See Also IConverter | Improve this Doc View Source ConvertTo(JsonDocument, object?, Type) Converts the specified source. Declaration public object? ConvertTo(JsonDocument source, object? destination, Type destinationType) Parameters Type Name Description JsonDocument source The source. object destination The destination. Type destinationType Type of the destination. Returns Type Description object The converted value See Also IConverter | Improve this Doc View Source Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Maps the specified source to the destination. Declaration public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. Returns Type Description Expression The resulting expression. See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.JsonElementConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.JsonElementConverter.html",
    "title": "Class JsonElementConverter | ObjectCartographer API Reference",
    "keywords": "Class JsonElementConverter JsonElement converter Inheritance object JsonElementConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class JsonElementConverter : IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public bool CanHandle(Type source, Type destination) Parameters Type Name Description Type source The source. Type destination The destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. See Also IConverter | Improve this Doc View Source ConvertTo(JsonElement, object?, Type) Converts the specified source. Declaration public object? ConvertTo(JsonElement source, object? destination, Type destinationType) Parameters Type Name Description JsonElement source The source. object destination The destination. Type destinationType Type of the destination. Returns Type Description object The converted value See Also IConverter | Improve this Doc View Source Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Maps the specified source to the destination. Declaration public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. Returns Type Description Expression The resulting expression. See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.KeyValuePairConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.KeyValuePairConverter.html",
    "title": "Class KeyValuePairConverter | ObjectCartographer API Reference",
    "keywords": "Class KeyValuePairConverter Key value pair converter Inheritance object KeyValuePairConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class KeyValuePairConverter : IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public bool CanHandle(Type sourceType, Type destinationType) Parameters Type Name Description Type sourceType Type of the source. Type destinationType Type of the destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. See Also IConverter | Improve this Doc View Source Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Maps the specified source to the destination. Declaration public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. Returns Type Description Expression The resulting expression. See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.PrimitiveConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.PrimitiveConverter.html",
    "title": "Class PrimitiveConverter | ObjectCartographer API Reference",
    "keywords": "Class PrimitiveConverter Primitive converter Inheritance object PrimitiveConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class PrimitiveConverter : IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public bool CanHandle(Type sourceType, Type destinationType) Parameters Type Name Description Type sourceType Type of the source. Type destinationType Type of the destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. See Also IConverter | Improve this Doc View Source Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. Declaration public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. Returns Type Description Expression The resulting expression. See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.SameConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.SameConverter.html",
    "title": "Class SameConverter | ObjectCartographer API Reference",
    "keywords": "Class SameConverter Same converter Inheritance object SameConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class SameConverter : IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public bool CanHandle(Type sourceType, Type destinationType) Parameters Type Name Description Type sourceType Type of the source. Type destinationType Type of the destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. See Also IConverter | Improve this Doc View Source Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. Declaration public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. Returns Type Description Expression The resulting expression. See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.StringByteArrayConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.StringByteArrayConverter.html",
    "title": "Class StringByteArrayConverter | ObjectCartographer API Reference",
    "keywords": "Class StringByteArrayConverter String/Byte array converter Inheritance object StringByteArrayConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class StringByteArrayConverter : IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public bool CanHandle(Type sourceType, Type destinationType) Parameters Type Name Description Type sourceType Type of the source. Type destinationType Type of the destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. See Also IConverter | Improve this Doc View Source GetBytes(string) Gets the bytes. Declaration public static byte[] GetBytes(string data) Parameters Type Name Description string data The data. Returns Type Description byte[] See Also IConverter | Improve this Doc View Source GetString(byte[]) Gets the bytes. Declaration public static string GetString(byte[] data) Parameters Type Name Description byte[] data The data. Returns Type Description string See Also IConverter | Improve this Doc View Source Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. Declaration public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. Returns Type Description Expression The resulting expression. See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.StringParsingConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.StringParsingConverter.html",
    "title": "Class StringParsingConverter | ObjectCartographer API Reference",
    "keywords": "Class StringParsingConverter String parsing converter Inheritance object StringParsingConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class StringParsingConverter : IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public bool CanHandle(Type sourceType, Type destinationType) Parameters Type Name Description Type sourceType Type of the source. Type destinationType Type of the destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. See Also IConverter | Improve this Doc View Source Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. Declaration public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. Returns Type Description Expression The resulting expression. See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.ToDictionaryConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.ToDictionaryConverter.html",
    "title": "Class ToDictionaryConverter | ObjectCartographer API Reference",
    "keywords": "Class ToDictionaryConverter To dictionary converter Inheritance object ConverterBaseClass ToDictionaryConverter Implements IConverter Inherited Members ConverterBaseClass.Map(Expression, Expression, Type, Type, IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.CreateObject(Expression, Expression, PropertyInfo[], ConstructorInfo[], IExpressionMapping, ExpressionBuilderManager) ConverterBaseClass.ForEach(Expression, ParameterExpression, Expression) ConverterBaseClass.GetCopyConstructor(Type, Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class ToDictionaryConverter : ConverterBaseClass, IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public override int Order { get; } Property Value Type Description int The order. Overrides ConverterBaseClass.Order See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public override bool CanHandle(Type source, Type destination) Parameters Type Name Description Type source The source. Type destination The destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. Overrides ConverterBaseClass.CanHandle(Type, Type) See Also IConverter | Improve this Doc View Source CopyObject(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager, List<Expression>) Copies to dictionary. Declaration protected override Expression CopyObject(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager, List<Expression> expressions) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. List<Expression> expressions The expressions. Returns Type Description Expression The resulting expression. Overrides ConverterBaseClass.CopyObject(Expression, Expression, Type, Type, IExpressionMapping, ExpressionBuilderManager, List<Expression>) See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.ToStringConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.ToStringConverter.html",
    "title": "Class ToStringConverter | ObjectCartographer API Reference",
    "keywords": "Class ToStringConverter ToString converter Inheritance object ToStringConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class ToStringConverter : IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public bool CanHandle(Type sourceType, Type destinationType) Parameters Type Name Description Type sourceType Type of the source. Type destinationType Type of the destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. See Also IConverter | Improve this Doc View Source Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. Declaration public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. Returns Type Description Expression See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.TypeConverterConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.TypeConverterConverter.html",
    "title": "Class TypeConverterConverter | ObjectCartographer API Reference",
    "keywords": "Class TypeConverterConverter TypeConverter converter Inheritance object TypeConverterConverter Implements IConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder.Converters Assembly: ObjectCartographer.dll Syntax public class TypeConverterConverter : IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IConverter Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration public bool CanHandle(Type sourceType, Type destinationType) Parameters Type Name Description Type sourceType Type of the source. Type destinationType Type of the destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. See Also IConverter | Improve this Doc View Source Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Converts the specified property get. Declaration public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. Returns Type Description Expression The resulting expression. See Also IConverter Implements IConverter Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IConverter"
  },
  "api/ObjectCartographer.ExpressionBuilder.Converters.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Converters.html",
    "title": "Namespace ObjectCartographer.ExpressionBuilder.Converters | ObjectCartographer API Reference",
    "keywords": "Namespace ObjectCartographer.ExpressionBuilder.Converters Classes ArrayIEnumerableConverter IEnumerable to array converter AssignableFromConverter Assignable from converter ClassToClassConverter Class to class converter DefaultConverter Default converters EnumConverter Enum converter FromDictionaryConverter From dictionary converter FromEnumConverter From enum converter FromJsonElementDictionaryConverter Json element dictionary converter ICollectionConverter Collection converter JsonDocumentConverter From JsonDocument converter JsonElementConverter JsonElement converter KeyValuePairConverter Key value pair converter PrimitiveConverter Primitive converter SameConverter Same converter StringByteArrayConverter String/Byte array converter StringParsingConverter String parsing converter ToDictionaryConverter To dictionary converter ToStringConverter ToString converter TypeConverterConverter TypeConverter converter"
  },
  "api/ObjectCartographer.ExpressionBuilder.ExpressionBuilderManager.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.ExpressionBuilderManager.html",
    "title": "Class ExpressionBuilderManager | ObjectCartographer API Reference",
    "keywords": "Class ExpressionBuilderManager Expression builder manager Inheritance object ExpressionBuilderManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder Assembly: ObjectCartographer.dll Syntax public class ExpressionBuilderManager Constructors | Improve this Doc View Source ExpressionBuilderManager(IEnumerable<IConverter>) Initializes a new instance of the ExpressionBuilderManager class. Declaration public ExpressionBuilderManager(IEnumerable<IConverter> expressionMappers) Parameters Type Name Description IEnumerable<IConverter> expressionMappers The expression mappers. Methods | Improve this Doc View Source Map(Expression, Expression?, Type, Type, IExpressionMapping) Maps the specified source. Declaration public Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. Returns Type Description Expression | Improve this Doc View Source Map<TSource, TDestination>(TypeMapping<TSource, TDestination>) Converts the specified source and destination. Declaration public Func<TSource, TDestination, TDestination> Map<TSource, TDestination>(TypeMapping<TSource, TDestination> typeInfo) Parameters Type Name Description TypeMapping<TSource, TDestination> typeInfo The mapping. Returns Type Description Func<TSource, TDestination, TDestination> The resulting expression. Type Parameters Name Description TSource The type of the source. TDestination The type of the destination. Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn)"
  },
  "api/ObjectCartographer.ExpressionBuilder.ExpressionMapping-2.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.ExpressionMapping-2.html",
    "title": "Class ExpressionMapping<TSource, TDestination> | ObjectCartographer API Reference",
    "keywords": "Class ExpressionMapping<TSource, TDestination> Expression mapping Inheritance object ExpressionMapping<TSource, TDestination> Implements IExpressionMapping Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.ExpressionBuilder Assembly: ObjectCartographer.dll Syntax public class ExpressionMapping<TSource, TDestination> : IExpressionMapping Type Parameters Name Description TSource The type of the source. TDestination The type of the destination. Constructors | Improve this Doc View Source ExpressionMapping() Initializes a new instance of the ExpressionMapping<TSource, TDestination> class. Declaration public ExpressionMapping() Properties | Improve this Doc View Source DestinationParameter Gets the destination parameter. Declaration public ParameterExpression DestinationParameter { get; } Property Value Type Description ParameterExpression The destination parameter. | Improve this Doc View Source DestinationType Gets the type of the destination. Declaration public Type DestinationType { get; } Property Value Type Description Type The type of the destination. | Improve this Doc View Source FinalExpression Gets or sets the final expression. Declaration public Expression? FinalExpression { get; set; } Property Value Type Description Expression The final expression. | Improve this Doc View Source SourceParameter Gets the source parameter. Declaration public ParameterExpression SourceParameter { get; } Property Value Type Description ParameterExpression The source parameter. | Improve this Doc View Source SourceType Gets the type of the source. Declaration public Type SourceType { get; } Property Value Type Description Type The type of the source. | Improve this Doc View Source Variables Gets the variables. Declaration public List<ParameterExpression> Variables { get; } Property Value Type Description List<ParameterExpression> The variables. Methods | Improve this Doc View Source AddVariable(Type) Adds the variable. Declaration public ParameterExpression? AddVariable(Type type) Parameters Type Name Description Type type The type. Returns Type Description ParameterExpression The new variable | Improve this Doc View Source Build() Builds this instance. Declaration public Func<TSource, TDestination, TDestination> Build() Returns Type Description Func<TSource, TDestination, TDestination> The final function. Implements IExpressionMapping Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn)"
  },
  "api/ObjectCartographer.ExpressionBuilder.Interfaces.IConverter.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Interfaces.IConverter.html",
    "title": "Interface IConverter | ObjectCartographer API Reference",
    "keywords": "Interface IConverter Converter interface Namespace: ObjectCartographer.ExpressionBuilder.Interfaces Assembly: ObjectCartographer.dll Syntax public interface IConverter Properties | Improve this Doc View Source Order Gets the order. Declaration int Order { get; } Property Value Type Description int The order. Methods | Improve this Doc View Source CanHandle(Type, Type) Determines whether this instance can handle the specified types. Declaration bool CanHandle(Type source, Type destination) Parameters Type Name Description Type source The source. Type destination The destination. Returns Type Description bool true if this instance can handle the specified types; otherwise, false. | Improve this Doc View Source Map(Expression, Expression?, Type, Type, IExpressionMapping, ExpressionBuilderManager) Maps the specified source to the destination. Declaration Expression Map(Expression source, Expression? destination, Type sourceType, Type destinationType, IExpressionMapping mapping, ExpressionBuilderManager manager) Parameters Type Name Description Expression source The source. Expression destination The destination. Type sourceType Type of the source. Type destinationType Type of the destination. IExpressionMapping mapping The mapping. ExpressionBuilderManager manager The manager. Returns Type Description Expression The resulting expression. Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn)"
  },
  "api/ObjectCartographer.ExpressionBuilder.Interfaces.IExpressionMapping.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Interfaces.IExpressionMapping.html",
    "title": "Interface IExpressionMapping | ObjectCartographer API Reference",
    "keywords": "Interface IExpressionMapping Expression mapping interface Namespace: ObjectCartographer.ExpressionBuilder.Interfaces Assembly: ObjectCartographer.dll Syntax public interface IExpressionMapping Properties | Improve this Doc View Source DestinationParameter Gets the destination parameter. Declaration ParameterExpression DestinationParameter { get; } Property Value Type Description ParameterExpression The destination parameter. | Improve this Doc View Source DestinationType Gets the type of the destination. Declaration Type DestinationType { get; } Property Value Type Description Type The type of the destination. | Improve this Doc View Source FinalExpression Gets the expressions. Declaration Expression? FinalExpression { get; set; } Property Value Type Description Expression The expressions. | Improve this Doc View Source SourceParameter Gets the source parameter. Declaration ParameterExpression SourceParameter { get; } Property Value Type Description ParameterExpression The source parameter. | Improve this Doc View Source SourceType Gets the type of the source. Declaration Type SourceType { get; } Property Value Type Description Type The type of the source. | Improve this Doc View Source Variables Gets the variables. Declaration List<ParameterExpression> Variables { get; } Property Value Type Description List<ParameterExpression> The variables. Methods | Improve this Doc View Source AddVariable(Type) Adds the variable. Declaration ParameterExpression? AddVariable(Type type) Parameters Type Name Description Type type The type. Returns Type Description ParameterExpression The new variable Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn)"
  },
  "api/ObjectCartographer.ExpressionBuilder.Interfaces.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.Interfaces.html",
    "title": "Namespace ObjectCartographer.ExpressionBuilder.Interfaces | ObjectCartographer API Reference",
    "keywords": "Namespace ObjectCartographer.ExpressionBuilder.Interfaces Interfaces IConverter Converter interface IExpressionMapping Expression mapping interface"
  },
  "api/ObjectCartographer.ExpressionBuilder.html": {
    "href": "api/ObjectCartographer.ExpressionBuilder.html",
    "title": "Namespace ObjectCartographer.ExpressionBuilder | ObjectCartographer API Reference",
    "keywords": "Namespace ObjectCartographer.ExpressionBuilder Classes ExpressionBuilderManager Expression builder manager ExpressionMapping<TSource, TDestination> Expression mapping"
  },
  "api/ObjectCartographer.Interfaces.IInternalTypeMapping.html": {
    "href": "api/ObjectCartographer.Interfaces.IInternalTypeMapping.html",
    "title": "Interface IInternalTypeMapping | ObjectCartographer API Reference",
    "keywords": "Interface IInternalTypeMapping Type mapping interface Namespace: ObjectCartographer.Interfaces Assembly: ObjectCartographer.dll Syntax public interface IInternalTypeMapping Properties | Improve this Doc View Source Properties Gets the properties. Declaration List<IPropertyMapping> Properties { get; } Property Value Type Description List<IPropertyMapping> The properties. | Improve this Doc View Source TypeInfo Gets the type information. Declaration TypeTuple TypeInfo { get; } Property Value Type Description TypeTuple The type information. Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn)"
  },
  "api/ObjectCartographer.Interfaces.IPropertyMapping.html": {
    "href": "api/ObjectCartographer.Interfaces.IPropertyMapping.html",
    "title": "Interface IPropertyMapping | ObjectCartographer API Reference",
    "keywords": "Interface IPropertyMapping Property mapping interface Namespace: ObjectCartographer.Interfaces Assembly: ObjectCartographer.dll Syntax public interface IPropertyMapping Properties | Improve this Doc View Source Destination Gets the destination. Declaration MethodInfo Destination { get; } Property Value Type Description MethodInfo The destination. | Improve this Doc View Source DestinationTarget Gets the destination target. Declaration object? DestinationTarget { get; } Property Value Type Description object The destination target. | Improve this Doc View Source Source Gets the source. Declaration MethodInfo Source { get; } Property Value Type Description MethodInfo The source. | Improve this Doc View Source SourceTarget Gets the source target. Declaration object? SourceTarget { get; } Property Value Type Description object The source target. Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn)"
  },
  "api/ObjectCartographer.Interfaces.ITypeMapping.html": {
    "href": "api/ObjectCartographer.Interfaces.ITypeMapping.html",
    "title": "Interface ITypeMapping | ObjectCartographer API Reference",
    "keywords": "Interface ITypeMapping Type mapping interface Namespace: ObjectCartographer.Interfaces Assembly: ObjectCartographer.dll Syntax public interface ITypeMapping Methods | Improve this Doc View Source AutoMap() Automatically maps the two types. Declaration ITypeMapping AutoMap() Returns Type Description ITypeMapping This. | Improve this Doc View Source Build() Builds this instance. Declaration void Build() Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn)"
  },
  "api/ObjectCartographer.Interfaces.html": {
    "href": "api/ObjectCartographer.Interfaces.html",
    "title": "Namespace ObjectCartographer.Interfaces | ObjectCartographer API Reference",
    "keywords": "Namespace ObjectCartographer.Interfaces Interfaces IInternalTypeMapping Type mapping interface IPropertyMapping Property mapping interface ITypeMapping Type mapping interface"
  },
  "api/ObjectCartographer.Internal.DefaultValueLookup.html": {
    "href": "api/ObjectCartographer.Internal.DefaultValueLookup.html",
    "title": "Class DefaultValueLookup | ObjectCartographer API Reference",
    "keywords": "Class DefaultValueLookup Default value lookup Inheritance object DefaultValueLookup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.Internal Assembly: ObjectCartographer.dll Syntax public static class DefaultValueLookup Fields | Improve this Doc View Source Values The values Declaration public static Dictionary<int, object?> Values Field Value Type Description Dictionary<int, object>"
  },
  "api/ObjectCartographer.Internal.PropertyMapping-3.html": {
    "href": "api/ObjectCartographer.Internal.PropertyMapping-3.html",
    "title": "Class PropertyMapping<TLeft, TRight, TLeftPropertyType> | ObjectCartographer API Reference",
    "keywords": "Class PropertyMapping<TLeft, TRight, TLeftPropertyType> Property mapping Inheritance object PropertyMapping<TLeft, TRight, TLeftPropertyType> Implements IPropertyMapping Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.Internal Assembly: ObjectCartographer.dll Syntax public class PropertyMapping<TLeft, TRight, TLeftPropertyType> : IPropertyMapping Type Parameters Name Description TLeft The type of the left. TRight The type of the right. TLeftPropertyType The type of the right property type. Constructors | Improve this Doc View Source PropertyMapping(Func<TLeft, TLeftPropertyType>, Action<TRight, TLeftPropertyType>) Initializes a new instance of the PropertyMapping<TLeft, TRight, TLeftPropertyType> class. Declaration public PropertyMapping(Func<TLeft, TLeftPropertyType> leftProperty, Action<TRight, TLeftPropertyType> rightProperty) Parameters Type Name Description Func<TLeft, TLeftPropertyType> leftProperty The left property. Action<TRight, TLeftPropertyType> rightProperty The right property. See Also IPropertyMapping Properties | Improve this Doc View Source Destination Gets the destination. Declaration public MethodInfo Destination { get; } Property Value Type Description MethodInfo The destination. See Also IPropertyMapping | Improve this Doc View Source DestinationTarget Gets the destination target. Declaration public object? DestinationTarget { get; } Property Value Type Description object The destination target. See Also IPropertyMapping | Improve this Doc View Source Source Gets the source. Declaration public MethodInfo Source { get; } Property Value Type Description MethodInfo The source. See Also IPropertyMapping | Improve this Doc View Source SourceTarget Gets the source target. Declaration public object? SourceTarget { get; } Property Value Type Description object The source target. See Also IPropertyMapping Implements IPropertyMapping Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IPropertyMapping"
  },
  "api/ObjectCartographer.Internal.TypeTuple.html": {
    "href": "api/ObjectCartographer.Internal.TypeTuple.html",
    "title": "Struct TypeTuple | ObjectCartographer API Reference",
    "keywords": "Struct TypeTuple Type tuple Implements IEquatable<TypeTuple> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ObjectCartographer.Internal Assembly: ObjectCartographer.dll Syntax public readonly struct TypeTuple : IEquatable<TypeTuple> Constructors | Improve this Doc View Source TypeTuple(Type, Type) Initializes a new instance of the TypeTuple struct. Declaration public TypeTuple(Type source, Type destination) Parameters Type Name Description Type source The source. Type destination The destination. See Also IEquatable<T> Properties | Improve this Doc View Source Destination Gets the destination. Declaration public Type Destination { get; } Property Value Type Description Type The destination. See Also IEquatable<T> | Improve this Doc View Source Source Gets the source. Declaration public Type Source { get; } Property Value Type Description Type The source. See Also IEquatable<T> Methods | Improve this Doc View Source Equals(TypeTuple) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(TypeTuple other) Parameters Type Name Description TypeTuple other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. See Also IEquatable<T> | Improve this Doc View Source Equals(object) Determines whether the specified object, is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) See Also IEquatable<T> | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() See Also IEquatable<T> Implements IEquatable<T> Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IEquatable<T>"
  },
  "api/ObjectCartographer.Internal.html": {
    "href": "api/ObjectCartographer.Internal.html",
    "title": "Namespace ObjectCartographer.Internal | ObjectCartographer API Reference",
    "keywords": "Namespace ObjectCartographer.Internal Classes DefaultValueLookup Default value lookup PropertyMapping<TLeft, TRight, TLeftPropertyType> Property mapping Structs TypeTuple Type tuple"
  },
  "api/ObjectCartographer.Modules.CanisterModule.html": {
    "href": "api/ObjectCartographer.Modules.CanisterModule.html",
    "title": "Class CanisterModule | ObjectCartographer API Reference",
    "keywords": "Class CanisterModule Canister module Inheritance object CanisterModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer.Modules Assembly: ObjectCartographer.dll Syntax public class CanisterModule : IModule Properties | Improve this Doc View Source Order Order to run this in Declaration public int Order { get; } Property Value Type Description int See Also IModule Methods | Improve this Doc View Source Load(IServiceCollection?) Loads the module using the bootstrapper Declaration public void Load(IServiceCollection? bootstrapper) Parameters Type Name Description IServiceCollection bootstrapper The bootstrapper. See Also IModule Implements IModule Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also IModule"
  },
  "api/ObjectCartographer.Modules.html": {
    "href": "api/ObjectCartographer.Modules.html",
    "title": "Namespace ObjectCartographer.Modules | ObjectCartographer API Reference",
    "keywords": "Namespace ObjectCartographer.Modules Classes CanisterModule Canister module"
  },
  "api/ObjectCartographer.ObjectExtensions.html": {
    "href": "api/ObjectCartographer.ObjectExtensions.html",
    "title": "Class ObjectExtensions | ObjectCartographer API Reference",
    "keywords": "Class ObjectExtensions Object extensions Inheritance object ObjectExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer Assembly: ObjectCartographer.dll Syntax public static class ObjectExtensions Methods | Improve this Doc View Source AutoMap(object?, Type) Automatically maps the object to the destination type. Declaration public static void AutoMap(this object? item, Type destinationType) Parameters Type Name Description object item The item. Type destinationType Type of the destination. | Improve this Doc View Source AutoMap<TDestination>(object?) Automatically maps the object to the destination type. Declaration public static void AutoMap<TDestination>(this object? item) Parameters Type Name Description object item The item. Type Parameters Name Description TDestination The type of the destination. | Improve this Doc View Source AutoMap<TSource, TDestination>(TSource) Automatically maps the object to the destination type. Declaration public static TSource AutoMap<TSource, TDestination>(this TSource item) Parameters Type Name Description TSource item The item. Returns Type Description TSource Type Parameters Name Description TSource The type of the source. TDestination The type of the destination. | Improve this Doc View Source Map<TSource, TDestination>(TSource) Maps the specified two types together. Declaration public static TypeMapping<TSource, TDestination>? Map<TSource, TDestination>(this TSource item) Parameters Type Name Description TSource item The item. Returns Type Description TypeMapping<TSource, TDestination> The type mapping object. Type Parameters Name Description TSource The type of the source. TDestination The type of the destination. | Improve this Doc View Source To(object?, Type, object?) Attempts to convert the object to another type and returns the value Declaration public static object? To(this object? item, Type resultType, object? defaultValue) Parameters Type Name Description object item Object to convert Type resultType Result type object defaultValue Default value to return if there is an issue or it can't be converted Returns Type Description object The object converted to the other type or the default value if there is an error or can't be converted | Improve this Doc View Source To<TReturn>(object?, TReturn) Attempts to convert the object to another type and returns the value Declaration public static TReturn To<TReturn>(this object? item, TReturn defaultValue = default) Parameters Type Name Description object item Object to convert TReturn defaultValue Default value to return if there is an issue or it can't be converted Returns Type Description TReturn The object converted to the other type or the default value if there is an error or can't be converted Type Parameters Name Description TReturn Return type"
  },
  "api/ObjectCartographer.TypeMapping-2.html": {
    "href": "api/ObjectCartographer.TypeMapping-2.html",
    "title": "Class TypeMapping<TSource, TDestination> | ObjectCartographer API Reference",
    "keywords": "Class TypeMapping<TSource, TDestination> Type mapping Inheritance object TypeMapping<TSource, TDestination> Implements ITypeMapping IInternalTypeMapping Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ObjectCartographer Assembly: ObjectCartographer.dll Syntax public class TypeMapping<TSource, TDestination> : ITypeMapping, IInternalTypeMapping Type Parameters Name Description TSource The type of the source. TDestination The type of the destination. Constructors | Improve this Doc View Source TypeMapping(TypeTuple, ILogger?, ExpressionBuilderManager?) Initializes a new instance of the TypeMapping<TSource, TDestination> class. Declaration public TypeMapping(TypeTuple typeInfo, ILogger? logger, ExpressionBuilderManager? expressionBuilder) Parameters Type Name Description TypeTuple typeInfo The type information. ILogger logger The logger. ExpressionBuilderManager expressionBuilder The expression builder. See Also ITypeMapping Properties | Improve this Doc View Source Converter Gets or sets the converter. Declaration public Func<TSource, TDestination, TDestination>? Converter { get; } Property Value Type Description Func<TSource, TDestination, TDestination> The converter. See Also ITypeMapping | Improve this Doc View Source Properties Gets the mappings. Declaration public List<IPropertyMapping> Properties { get; } Property Value Type Description List<IPropertyMapping> The mappings. See Also ITypeMapping | Improve this Doc View Source TypeInfo Gets the type information. Declaration public TypeTuple TypeInfo { get; } Property Value Type Description TypeTuple The type information. See Also ITypeMapping Methods | Improve this Doc View Source AddMapping<TSourceProperty>(Func<TSource, TSourceProperty>, Action<TDestination, TSourceProperty>) Adds the mapping specified. Declaration public TypeMapping<TSource, TDestination> AddMapping<TSourceProperty>(Func<TSource, TSourceProperty> leftExpression, Action<TDestination, TSourceProperty> rightExpression) Parameters Type Name Description Func<TSource, TSourceProperty> leftExpression The left expression. Action<TDestination, TSourceProperty> rightExpression The right expression. Returns Type Description TypeMapping<TSource, TDestination> This. Type Parameters Name Description TSourceProperty See Also ITypeMapping | Improve this Doc View Source AutoMap() Automatically maps the two types. Declaration public ITypeMapping AutoMap() Returns Type Description ITypeMapping This. See Also ITypeMapping | Improve this Doc View Source Build() Builds this instance. Declaration public void Build() See Also ITypeMapping | Improve this Doc View Source UseMethod(Func<TSource, TDestination, TDestination>) Uses the method supplied instead of building out a converter. Declaration public TypeMapping<TSource, TDestination> UseMethod(Func<TSource, TDestination, TDestination> func) Parameters Type Name Description Func<TSource, TDestination, TDestination> func The function. Returns Type Description TypeMapping<TSource, TDestination> This. See Also ITypeMapping Implements ITypeMapping IInternalTypeMapping Extension Methods ObjectExtensions.AutoMap<TSource, TDestination>(TSource) ObjectExtensions.Map<TSource, TDestination>(TSource) ObjectExtensions.AutoMap(object?, Type) ObjectExtensions.AutoMap<TDestination>(object?) ObjectExtensions.To(object?, Type, object?) ObjectExtensions.To<TReturn>(object?, TReturn) See Also ITypeMapping"
  },
  "api/ObjectCartographer.html": {
    "href": "api/ObjectCartographer.html",
    "title": "Namespace ObjectCartographer | ObjectCartographer API Reference",
    "keywords": "Namespace ObjectCartographer Classes DataMapper Data mapper ObjectExtensions Object extensions TypeMapping<TSource, TDestination> Type mapping"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | ObjectCartographer API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | ObjectCartographer API Reference",
    "keywords": "Code using Microsoft.Extensions.DependencyInjection; using System.Dynamic; using System.Text; namespace ObjectCartographer.Example { internal class Program { private static void Main(string[] args) { ServiceProvider? Collection = new ServiceCollection().AddCanisterModules()?.BuildServiceProvider(); if (Collection is null) return; // Create an object of type TestType2 from an object of type TestType1 and copy the // value of A TestType2 Result = new TestType1 { A = 10 }.To<TestType2>(); Console.WriteLine(Result.A); // Copy the value of A from an object of type TestType1 to an object of type TestType2 TestType2 Result2 = new TestType1 { A = 20 }.To(new TestType2()); Console.WriteLine(Result2.A); // Convert the string \"Example String\" to a byte array and then back to a string var Result3 = \"Example String\".To<byte[]>(); Console.WriteLine(Encoding.UTF8.GetString(Result3)); Console.WriteLine(Result3.To<string>()); // Convert an ExpandoObject to a Dictionary<string, object> dynamic ExpandoTest = new ExpandoObject(); ExpandoTest.A = 55; ExpandoTest.B = \"Test\"; dynamic Result4 = ((ExpandoObject)ExpandoTest).To<Dictionary<string, object>>(); Console.WriteLine(Result4[\"A\"]); Console.WriteLine(Result4[\"B\"]); } } /// <summary> /// Test class 1 /// </summary> internal class TestType1 { /// <summary> /// Gets or sets a. /// </summary> /// <value>a.</value> public int A { get; set; } } /// <summary> /// Test class 2 /// </summary> internal class TestType2 { /// <summary> /// Gets or sets a. /// </summary> /// <value>a.</value> public int A { get; set; } } } Output 10 20 Example String Example String 55 Test"
  },
  "index.html": {
    "href": "index.html",
    "title": "ObjectCartographer | ObjectCartographer API Reference",
    "keywords": "ObjectCartographer ObjectCartographer is a fast, convention based, and developer friendly object to object mapper. It's designed to simplify your life and remove the drudgery of writing code to copy data from one object to another. Setting Up the Library ObjectCartographer uses a library called Canister for registering itself in your ServiceCollection: servicecollection.AddCanisterModules(); With that ObjectCartographer will automatically register any converters found in your application and work with your DI system if you are using one, allowing you to access the DataMapper object at run time if you need to. Otherwise if you are not using one, you can simply use the extension methods and it will wire itself up. Basic Usage Once the initial setup is done, we need to map our objects to each other. This is accomplished in a number of different ways. First by using the DataMapper class: DataMapper.Map<MyClass1, MyClass2>() .AddMapping(MyClass1 => MyClass1.PropertyToReadFrom, (MyClass2, value) => MyClass2.PropertyToWriteTo = value) .AddMapping(MyClass1 => MyClass1.Property1 + MyClass1.Property2, (MyClass1, value) => MyClass2.ComputedProperty = value) .AddMapping(MyClass1 => MyClass1.A.B.C.D, (MyClass1, value) => MyClass2.ProjectionProperty = value) .Build(); The above code could also be written using the extension method Map: MyClass1Object.Map<MyClass1, MyClass2>() .AddMapping(MyClass1 => MyClass1.PropertyToReadFrom, (MyClass2, value) => MyClass2.PropertyToWriteTo = value) .AddMapping(MyClass1 => MyClass1.Property1 + MyClass1.Property2, (MyClass1, value) => MyClass2.ComputedProperty = value) .AddMapping(MyClass1 => MyClass1.A.B.C.D, (MyClass1, value) => MyClass2.ProjectionProperty = value) .Build(); You can also supply your own method for copying the data: MyClass1Object.Map<MyClass1, MyClass2>() .UseMethod(MyCopier) .Build(); It's also possible, if you'd prefer, for the system to map everything for you based on the conventions that the system uses: DataMapper.AutoMap<MyClass1, MyClass2>(); Or: MyClass1Object.AutoMap<MyClass2>(); And lastly, you can simply skip the above steps all together and simply start using the library: MyClass2 Result = MyClass1Object.To<MyClass2>(); If you don't set up the mapping beforehand, the library will go through the properties on MyClass1 and map them to properties with the same name on MyClass2. It compares the property names by first looking for exact matches, then it will drop underscores and compare them ignoring case. Give Me Speed The library is about 34% faster than AutoMapper in more complex scenarios: BenchmarkDotNet=v0.13.0, OS=Windows 10.0.18363.1440 (1909/November2019Update/19H2) Intel Core i7-9850H CPU 2.60GHz, 1 CPU, 12 logical and 6 physical cores .NET SDK=5.0.203 [Host] : .NET 5.0.6 (5.0.621.22011), X64 RyuJIT DefaultJob : .NET 5.0.6 (5.0.621.22011), X64 RyuJIT Method Mean Error StdDev Ratio RatioSD Rank AutoMapper 91.575 ns 0.9259 ns 0.8661 ns 1.34 0.02 2 ObjectCartographer 68.374 ns 0.6952 ns 0.6163 ns 1.00 0.00 1 And about 350% faster when an object is supplied to it and only data copying is required. BenchmarkDotNet=v0.13.0, OS=Windows 10.0.18363.1440 (1909/November2019Update/19H2) Intel Core i7-9850H CPU 2.60GHz, 1 CPU, 12 logical and 6 physical cores .NET SDK=5.0.203 [Host] : .NET 5.0.6 (5.0.621.22011), X64 RyuJIT DefaultJob : .NET 5.0.6 (5.0.621.22011), X64 RyuJIT Method Mean Error StdDev Median Ratio RatioSD Rank AutoMapper 88.796 ns 1.4598 ns 3.2951 ns 87.404 ns 3.48 0.16 2 ObjectCartographer 26.804 ns 0.2989 ns 0.2650 ns 26.712 ns 1.00 0.00 1 Installation The library is available via Nuget with the package name \"ObjectCartographer\". To install it run the following command in the Package Manager Console: Install-Package ObjectCartographer Note that there is a package that adds mapping for ADO.Net specific data types: \"ObjectCartographer.SQL\" so the system can do things like map DbType to SqlDbType along with other functionality. FAQ How do I add my own converter to the system? You would need to implement the ObjectCartographer.ExpressionBuilder.Interfaces.IConverter interface. There is also the ObjectCartographer.ExpressionBuilder.BaseClasses.ConverterBaseClass abstract class to help with destination object creation/copy constructor discovery which is good in instances where you are mapping more complex objects. For simple data conversions like string to an int, the IConverter interface should be enough. Build Process In order to build the library you may require the following: Visual Studio 2019 Other than that, just clone the project and you should be able to load the solution and build without too much effort."
  }
}